(define (double arguments)
    (* arguments 2)
)
(define (halve arguments)
    (/ arguments 2)
)
(define (times a b)
    (if (= b 0)
        0
        (+ a (* a (- b 1)))
    )
)

(define (expt num n)
    (expt-loop num n 1)    
)
(define (expt-loop num n res)
    (cond 
        ((= 0 n) res)
        ((even? n) (expt-loop (square num) (halve n) res))
        (else (expt-loop num (- n 1) (times res num)))
    )
)
(define (square n)
    (times n n )
)