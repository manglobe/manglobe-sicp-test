(define (fringe list)
    (if (not (pair? list) )
        (cons list '())
        (fringe-iter list '())
    )
)
(define (fringe-iter list result)
    (cond
        ((null? list) result)
        (else 
            (append (fringe (car list)) (fringe-iter (cdr list) result))
        )
    )
)

(define x (list (list 1 2) (list 3 4)))
(define (main)
    (display (fringe x))
    (newline)
    (display (fringe (list x x)))
)