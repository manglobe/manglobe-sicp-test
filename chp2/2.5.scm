(define (cons x y)
  (* (expt 2 x) (expt 3 y))
)
(define (car z)
    (iter-root-count z 2 0)
)
(define (cdr z)
    (iter-root-count z 3 0)
)

(define (iter-root-count number root count)
    (if (= 0 (mod number root))
        (iter-root-count (/ number root) root (+ count 1))
        count
    )
)
(define (main)
  (let ([z (cons 5 13)])
    (display (car z))    
    (newline)
    (display (cdr z))    
    )
)