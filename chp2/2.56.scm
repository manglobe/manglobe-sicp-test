(define (deriv exp var)
    (cond
        ((number? exp)  0)
        ((variable? exp) 
                (if (same-variable? exp var)
                1
                0
                )
        )
        ((sum? exp)
            (make-sum 
                (deriv (addend exp) var)
                (deriv (augend exp) var)
            )
        )
        ((product? exp)
            (make-sum
                (make-product (multiplier exp)
                    (deriv (multiplicand exp) var)
                )
                (make-product (deriv (multiplier exp) var)
                    (multiplicand exp)
                )
            )
        )
        ((exponentiation? exp)
            (let ([m (exponent exp)] [u (base exp)])
                (make-product 
                    (make-product
                        m
                        (make-exponentiation u (make-sum m -1))   
                    ) 
                    (deriv u var)    
                )    
            )
            
        )
        (else 
            (error "unknow expressin type -- DERIV" exp)
        )
    )
)

(define (variable? x)
    (symbol? x)    
)
(define (same-variable? x y)
    (and (variable? x) (variable? y) (eq? x y))
)
(define (sum? exp)
    (and (pair? exp) (eq? '+ (car exp)))
)
(define (make-sum x y)
    (cond
        ((=number? 0 x) y)
        ((=number? 0 y) x)
        ((and (number? x) (number? y)) (+ x y))
        (else (list '+ x y) )   
    )
)
(define (=number? num x)
    (and (number? x) (= num x))
)
(define (addend exp)
    (cadr exp)
)
(define (augend exp)
    (caddr exp)
)
(define (product? exp)
    (and (pair? exp) (eq? '* (car exp)))    
)
(define (make-product x y)
    (cond
        ((or (=number? 0 x) (=number? 0 y)) 0)
        ((=number? 1 x) y)
        ((=number? 1 y) x)
        ((and (number? x) (number? y)) (* x y))
        (else (list '* x y) )   
    )
)
(define (multiplier x)
  (cadr x)
)
(define (multiplicand x)
    (caddr x)
)

;exponentiation
(define (exponentiation? exp)
    (eq? '** (car exp))
)
(define (exponent exp)
    (caddr exp)
)
(define (base exp)
    (cadr exp)
)
(define (make-exponentiation x y)
    (cond
        ((=number? 0 y) 1)
        ((=number? 1 y) x)
        ((=number? 0 x) 0)
        ((=number? 1 x) 1)
        ((and (number? x) (number? y)) (expt x y))
        (else (list '** x y))    
    )    
)


(define (main)
    (display (deriv '(+ x 3) 'x))
    (newline)
    (display (deriv '(* x y) 'x))
    (newline)
    (display (deriv '(* (* x y) (+ x 3)) 'x))
    (newline)
    (display (deriv '(** x 5) 'x))
    (newline)
    (display (deriv '(** x y) 'x))
    (newline)
)