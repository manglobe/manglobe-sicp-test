(define (make-mobile left right)
    (list left right)
)
(define (make-branch length structure)
    (list length structure)
)

;a
(define (left-branch mobile)
    (car mobile)
)
(define (right-branch mobile)
    (car (cdr mobile))
)
(define (branch-length branch)
    (car branch)
)
(define (branch-structure branch)
    (car (cdr branch))
)

;b
(define (total-weight-branch branch)
    (cond
        ((number? (branch-structure branch)) (branch-structure branch))
        (else  (total-weight (branch-structure branch)))
    )
)
(define (total-weight mobile)
    (+ (total-weight-branch (left-branch mobile))
        (total-weight-branch (right-branch mobile))
    )
)

;c
(define (branch-moment branch)
     (* (total-weight-branch branch) (branch-length branch))
    )
(define (is-balanced mobile)
    (if (number? mobile) 
        #t
        (let ([left (left-branch mobile)] [right (right-branch mobile)])
                
                (and (eqv? (branch-moment left) (branch-moment right)) (is-balanced (branch-structure left)) (is-balanced (branch-structure right)))
        )
    )
)
; test

(define mobile1 (make-mobile (make-branch 3 7) (make-branch 11 17)))
(define mobile2 (make-mobile (make-branch 5 mobile1) (make-branch 13 17)))
(define mobile3 (make-mobile (make-branch 2 mobile2) (make-branch 23 mobile2)))

(define mobile4 (make-mobile (make-branch 4 6) (make-branch 3 8)))
(define mobile5 (make-mobile (make-branch 3 4) (make-branch 6 2)))
(define mobile6 (make-mobile (make-branch 3 mobile4) (make-branch 7 mobile5)))
; test-a
(define (mainA)
    (display "mobile1:")
    (display mobile1)
    (newline)
    (display "mobile2:")
    (display mobile2)
    (newline)
    (display "mobile3:")
    (display mobile3)
    (newline)
    (display "mobile4:")
    (display mobile4)
    (newline)
    (display "mobile5:")
    (display mobile5)
    (newline)
    (display "mobile6:")
    (display mobile6)
)
; test-b
(define (mainB)
    (display "mobile1:")
    (display (total-weight mobile1))
    (newline)
    (display "mobile2:")
    (display (total-weight mobile2))
    (newline)
    (display "mobile3:")
    (display (total-weight mobile3))
    (newline)
    (display "mobile4:")
    (display (total-weight mobile4))
    (newline)
    (display "mobile5:")
    (display (total-weight mobile5))
    (newline)
    (display "mobile6:")
    (display (total-weight mobile6))
)
; test-c
(define (mainC)
    (display "mobile1:")
    (display (is-balanced  mobile1))
    (newline)
    (display "mobile2:")
    (display (is-balanced  mobile2))
    (newline)
    (display "mobile3:")
    (display (is-balanced  mobile3))
    (newline)
    (display "mobile4:")
    (display (is-balanced  mobile4))
    (newline)
    (display "mobile5:")
    (display (is-balanced  mobile5))
    (newline)
    (display "mobile6:")
    (display (is-balanced  mobile6))
    (newline)
)