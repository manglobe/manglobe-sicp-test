(define (square-tree1 tree)
  (square-tree1-iter tree '())
)
(define (square-tree1-iter tree result)
    (cond
        ((null? tree) result)
        ((not (pair? tree)) (* tree tree))
        (else (cons (square-tree1 (car tree)) (square-tree1 (cdr tree))))
    )
)
(define (square-tree2 tree)
    (map 
        (lambda (sub-tree) 
            (if (pair? sub-tree)
                (square-tree2 sub-tree)    
                (* sub-tree sub-tree)
            )
        ) 
    tree)
)
(define tree-demo (list 1 (list 2 (list 3 4) 5) (list 6 7)))
(define (main)
    (display (square-tree1 tree-demo))    
    (newline)
    (display (square-tree2 tree-demo))    
)