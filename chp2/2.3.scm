(load "./2.2.scm")



(define (permeter-rect rect get-x get-y)
    (* 2 
        (+ (get-x rect)
        ( get-y rect))
    )
)
(define (area-rect rect get-x get-y)
    (* (get-x rect)
        ( get-y rect)
    )
)

(define (make-rect-1 start end)
  (cons start end)
)

(define (x-length-1 rect)
    (abs (- (x-point (end-segment rect))
        (x-point (start-segment rect))
  ))
)
(define (y-length-1 rect)
    (abs (- (y-point (end-segment rect))
        (y-point (start-segment rect)))
    )
)
(define (test-1)
  (let ([rect (make-rect-1 (make-point 1 5) (make-point 12 3))])
    (display "result-1:")  
    (newline)
    (display "permeter: ")
    (display (permeter-rect rect x-length-1 y-length-1))
    (newline)
    (display "area: ")
    (display (area-rect rect x-length-1 y-length-1))
  )
)


(define (make-rect-2 start x y)
  (cons start (cons x y))
)

(define (x-length-2 rect)
    (abs (car (cdr rect)))
)
(define (y-length-2 rect)
    (abs (cdr (cdr rect)))
)
(define (test-2)
  (let ([rect (make-rect-2 (make-point 1 5) 11 -2)])
    (newline)
    (display "result-2:")  
    (newline)
    (display "permeter: ")
    (display (permeter-rect rect x-length-2 y-length-2))
    (newline)
    (display "area: ")
    (display (area-rect rect x-length-2 y-length-2))
  )
)

(define (main)
    (test-1)
    (test-2)
)
