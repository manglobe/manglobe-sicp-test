(define (accumulate op initial sequence)
    (if (null? sequence)
        initial
        (op (car sequence)
            (accumulate op initial (cdr sequence))
        )
    )
)
(define (accumulate-n op init seqs)
    (if (null? (car seqs))
        '()
        (cons (accumulate op init (map (lambda (sub-seqs) (car sub-seqs)) seqs))
            (accumulate-n op init (map (lambda (sub-seqs) (cdr sub-seqs)) seqs))
        )
    )
)
(define (dot-product v0 v1)
    (accumulate + 0 (map * v0 v1))
)
(define (matrix-*-vector v m)
  (map (lambda (m-v) (dot-product v m-v )) m)
)
(define (transpose m)
  (accumulate-n cons '() m)
)
(define (matrix-*-matrix m n)
    (let ([col (transpose n)])
        (map (lambda (m-col) 
            (matrix-*-vector m-col col)
        ) m)
    )
)

(define vector1
  '(1 2 3 4)
)
(define matrix1
  '((1 2 3 4) (5 6 7 8) (9 10 11 12))
)
(define matrix2
  '((10 11 13) (14 15 16) (17 18 19) (20 21 22))
)

(define (main)
    (map * vector1 vector1)
    (display "matrix-*-vector: ")
    (display (matrix-*-vector  vector1 matrix1))
    (newline)
    (display "transpose")
    (display (transpose matrix1))
    (newline)
    (display "matrix-*-matrix ")
    (display (matrix-*-matrix  matrix1 matrix2))
    (newline)
    (display "")
    (newline)
  )