(define (print-point p)
    (newline)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")")
)

(define (x-point p)
  (car p)
)
(define (y-point p)
  (cdr p)
)

(define (make-point x y)
  (cons x y)
)

(define (start-segment l)
  (car l)
)
(define (end-segment l)
  (cdr l)
)
(define (make-segment start end)
  (cons start end)
)

(define (mid pre-deal p1 p2)
   (/ (+ (pre-deal p1)
        (pre-deal p2)) 
    2)
)
(define (midpoint-segment segment)
    (let ([mid-x (mid x-point (start-segment segment)
                        (end-segment segment))]
        [mid-y (mid y-point (start-segment segment)
                        (end-segment segment))]          
        )
        (make-point mid-x mid-y)
    )
)

(define (main)
    (print-point (midpoint-segment (make-segment (make-point 0 0)  (make-point 2 4) )))
)